@import 'constants';

body {
    // Note: The popular mobile browsers fix vh to the entire viewport height (including url bar height) - https: //developers.google.com/web/updates/2016/12/url-bar-resizing.
    // They fix 100% for html height to viewport height - url bar height. This means that there is no reliable way to avoid overflow immediately after page load.
    // Consider a page with auto height < (viewport height - url bar), that has its html height set to 100% and body min-height set to 100%: if a drop down is expanded,
    // and the page is scrolled down such that the url bar transitions out, and finally the drop down is collapsed, there will be empty whitespace at the bottom of
    // the page.
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    position: relative;

    #overlay {
        // TODO is this affecting page height?
        height: 100vh;
        width: 100%;
        position: fixed;
        background-color: black;
        opacity: 0;
        z-index: 2;
        visibility: hidden;
        transition: opacity 0.3s $ease-out-quad;
        will-change: opacity;
    }
}

html, body {
    // Smooth-scroll plugin is smoother than this CSS property
    //scroll-behavior: smooth;
    font-size: $font-size-3;
    line-height: 1.6;
    opacity: $opacity-6;
}

body, body * {
    // By default, if an element is tapped in chrome for android, it flashes blue.
    // This is unecessary since animations are used by mimo to signify successful interation.
    -webkit-tap-highlight-color: transparent;
    // If left as default, some browsers, such as android chrome, attempt to enlarge certain portions of text that it deems important. Unfortunately, it does not seem to work consistently with documentation sites,
    // especially in tables - https://stackoverflow.com/questions/15977840/why-does-the-font-in-these-td-elements-render-at-different-sizes, https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust
    text-size-adjust: none;
    // Elements with display flex have min-width set to auto by default (a min-width value unique to flexbox). This causes a host of problems with overflowing content-
    // https://weblog.west-wind.com/posts/2016/Feb/15/Flexbox-Containers-PRE-tags-and-managing-Overflow.
    min-width: 0;
}

html {
    // see footerComponent
    height: 100vh;
    min-width: 320px;
}

button, a {
    cursor: pointer;
}

button {
    border: none;
    background-color: transparent;
    padding: 0;
}

*:focus {
    outline: none;
}

*::-moz-focus-inner {
    border: 0;
}

script {
    display: none;
}

a {
    color: $color-primary-link;
    text-decoration: none;
}

* {
    -webkit-margin-before: 0em;
    -webkit-margin-after: 0em;
}

*, *::before, *::after {
    box-sizing: border-box;
}

*::placeholder {
    opacity: $opacity-3;
    color: $color-primary-text;
}

*:placeholder {
    opacity: $opacity-3;
    color: $color-primary-text;
}

*::-ms-clear {
    display: none;
}
