@import '../shared/constants';

pre, code {
    font-size: $font-size-2;
}

code {
    padding: 3px 5px;
    background-color: $color-primary-inline-code-background;
}

.flexi-code-block {
    display: flex;
    flex-direction: column;

    header {
        min-height: 37px;
        display: flex;
        align-items: center;
        background-color: $color-section-header-background;

        span {
            padding: 6px 13px;
            font-weight: 600;
        }

        button {
            flex-shrink: 0;
            display: flex;
            margin-left: auto;
            margin-right: 9px;
            cursor: pointer;

            &:hover {
                svg {
                    transition-delay: $anti-flicker-delay;
                    fill: $color-primary-link;
                }
            }

            svg {
                height: 18px;
                width: 18px;
                fill: $color-primary-link-disabled;
                transition: fill $short-animation-duration $ease-out-quad;
                flex-shrink: 0;
            }
        }
    }

    pre {
        background-color: $color-section-body-background;
        white-space: pre-wrap;
        flex-grow: 1;
        overflow: auto; // If spans can no longer wrap, allow scrolling
        code {
            width: 100%; // We want each row to stretch so that highlighting is consistent
            display: table;
            // https://stackoverflow.com/questions/10054870/when-a-child-element-overflows-horizontally-why-is-the-right-padding-of-the-par
            background-color: transparent;
            border: 0;
            padding: 20px 20px;

            .line {
                display: table-row;

                &.highlight {
                    background-color: $color-primary-highlight;
                }

                .line-number, .line-text {
                    display: table-cell;
                }

                .line-text {
                    width: 100%; // We want line-text to stretch for consistent highlighting
                    // If line-text isn't the first child, there is a line number column on its left
                    &:not(:first-child) {
                        padding-left: 14px;
                    }
                }

                .line-number {
                    text-align: right;
                    padding-right: 14px;
                    user-select: none;
                    color: $color-code-line-numbers;
                    border-right: 1px solid $color-code-divider-background;

                    svg {
                        margin-right: 3px;
                        height: 10px;
                        width: 2px;
                        fill: $color-code-line-numbers;
                    }
                }
            }
        }
    }
}

code {
    /*
        TODO incomplete
        Styles for Prism.js
    */
    &.language-csharp,
    &.language-typescript {
        .builtin,
        .keyword {
            color: #00f;
        }

        .function {
            color: black;
        }

        .string {
            color: #a31515;
        }
    }

    &.language-html {
        color: #a31515;

        .punctuation {
            color: #00f;
        }

        .attr-name {
            color: #f00;
        }

        .attr-value {
            color: #00f;
        }
    }

    &.language-css {
        color: #00f;

        .punctuation {
            color: black;
        }

        .class {
            color: #a31515;
        }

        .property {
            color: #f00;
        }
    }

    &.language-scss {
        color: #a31515;

        .punctuation {
            color: black;
        }

        .comment {
            color: #008000;
        }

        .property {
            color: #f00;
        }

        .number {
            color: #00f;
        }
    }

    &.language-json {
        color: #008000;

        .operator,
        .punctuation {
            color: black;
        }

        .property {
            color: #2e75b6;
        }

        .number,
        .string {
            color: #a31515;
        }
    }
    /*
        Styles for Highlight.js
        - Visual Studio-like style based on original C# coloring by Jason Diamond <jason@diamond.name>
    */
    .hljs {
        background-color: transparent;
        color: black;
    }

    .hljs-comment,
    .hljs-quote,
    .hljs-variable {
        color: #008000;
    }

    .hljs-keyword,
    .hljs-selector-tag,
    .hljs-built_in,
    .hljs-name,
    .hljs-tag {
        color: #00f;
    }

    .hljs-string {
        color: #a31515;
    }

    .hljs-doctag,
    .hljs-deletion,
    .hljs-selector-attr,
    .hljs-selector-pseudo,
    .hljs-meta {
        color: #808080;
    }

    .hljs-attr {
        color: #f00;
    }

    .hljs-symbol,
    .hljs-bullet,
    .hljs-link {
        color: #00b0e8;
    }


    .hljs-emphasis {
        font-style: italic;
    }

    .hljs-strong {
        font-weight: bold;
    }

    .language-html {
        .hljs-string {
            color: #00f;
        }

        .hljs-name {
            color: #800000;
        }
    }

    .language-scss {
        .hljs-keyword,
        .hljs-variable {
            color: #800080;
        }

        .hljs-string {
            color: #00f;
        }

        .hljs-selector-tag,
        .hljs-name {
            color: #800000;
        }

        .hljs-attribute {
            color: #f00;
        }
    }

    .language-css {
        .hljs-built_in {
            color: #000;
        }

        .hljs-keyword {
            color: #800080;
        }

        .hljs-string {
            color: #00f;
        }

        .hljs-selector-tag,
        .hljs-selector-pseudo,
        .hljs-name {
            color: #800000;
        }

        .hljs-attribute {
            color: #f00;
        }
    }
}
