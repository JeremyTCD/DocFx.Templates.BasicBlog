@import 'constants';
@import '../node_modules/font-awesome/scss/_variables.scss';

#side-menu {
    font-size: $font-size-1;
    padding-top: 8px;
    margin-right: $gap-2;
    width: 200px;
    // Default flex-shrink is 1. When toc contents become fixed, they are taken out of the document flow.
    // Toc's adjacent article element expands fully width-wise. Flexbox thinks main's contents are overflowing width-wise
    // and distributes negative space between toc and article 1:1. To avoid this, flex-shrink must be set to 0.
    flex-shrink: 0;

    #side-menu-filter-and-toc {
        width: inherit;

        &.fixed {
            position: fixed;
            top: $gap-3;
        }

        #side-menu-toggle {
            @media (min-width: 768px) {
                display: none;
            }
        }

        #side-menu-filter {
            padding-bottom: $gap-3;

            input {
                height: $gap-2;
                padding: 8px 12px;
                width: 100%;
                border: 1px solid $border-color-2;
                border-radius: 0;
                outline: none;
                border-radius: $border-radius-main;
                transition: all $transition-1;

                &:focus {
                    border-color: $border-color-3;
                }
            }
        }

        #side-menu-toc {
            overflow-y: auto;

            ul {
                display: flex;
                flex-direction: column;

                li {
                    display: flex;
                    flex-direction: column;
                    flex-shrink: 0;

                    &.filter-hidden {
                        display: none;
                    }

                    &.expandable {
                        > a {
                            span {
                                &:first-child {
                                    &:before {
                                        visibility: visible;
                                        transform: rotate(0);
                                    }
                                }
                            }
                        }

                        &.expanded {
                            > a {
                                span {
                                    &:first-child {
                                        &:before {
                                            transform: rotate(90deg);
                                        }
                                    }
                                }
                            }
                        }

                        ul {
                            height: 0;
                            overflow: hidden;
                            transition: height $transition-2;
                        }
                    }

                    a {
                        user-select: none;
                        cursor: pointer;
                        display: flex;
                        align-items: center;
                        transition: all $transition-2;
                        background-color: #fff;

                        span {
                            padding-top: $gap-6;
                            padding-bottom: $gap-6;
                            padding-right: $gap-4;

                            &:first-child {
                                @include font-awesome($fa-var-angle-right);
                                display: flex;
                                padding-left: $gap-4;
                                color: $font-color-importance-3;

                                &:before {
                                    font-size: $font-size-3;
                                    visibility: hidden;
                                    transition: transform $transition-1;
                                }
                            }
                        }

                        &:not([href]) {
                            color: $font-color-importance-3;
                        }

                        &.active, &:hover.is-link {
                            background-color: $link-color-main;
                            color: #fff;

                            span {
                                &:first-child {
                                    color: inherit;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
